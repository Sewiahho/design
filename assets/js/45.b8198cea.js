(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{498:function(t,r,e){"use strict";e.r(r);var a=e(14),_=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"设计模式概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计模式概述"}},[t._v("#")]),t._v(" 设计模式概述")]),t._v(" "),e("blockquote",[e("p",[t._v("设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。")])]),t._v(" "),e("h2",{attrs:{id:"创建型模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[t._v("#")]),t._v(" 创建型模式")]),t._v(" "),e("h3",{attrs:{id:"创建型模式简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式简介"}},[t._v("#")]),t._v(" 创建型模式简介")]),t._v(" "),e("p",[e("strong",[t._v("创建型模式")]),t._v("抽象了"),e("strong",[t._v("实例化")]),t._v("的过程。它将"),e("strong",[t._v("系统")]),t._v("与它的"),e("strong",[t._v("对象")]),t._v("创建、结合、表示的方式"),e("strong",[t._v("分离")]),t._v("。")]),t._v(" "),e("p",[t._v("创建型模式都会将关于该系统使用哪些具体的类的信息"),e("strong",[t._v("封装")]),t._v("起来。")]),t._v(" "),e("p",[t._v("在软件工程中，创建型模式是处理对象创建的设计模式，试图根据实际情况使用合适的方式创建对象。")]),t._v(" "),e("p",[t._v("基本的对象创建方式可能会导致设计上的问题，或增加设计的复杂度。创建型模式通过以某种方式控制对象的创建来解决问题。")]),t._v(" "),e("p",[t._v("创建型模式的"),e("strong",[t._v("指导思想")]),t._v("是：")]),t._v(" "),e("ul",[e("li",[t._v("将系统使用的具体类封装起来。")]),t._v(" "),e("li",[t._v("隐藏这些具体类的实例创建和结合的方式。")])]),t._v(" "),e("p",[t._v("创建型模式又分为"),e("strong",[t._v("对象创建型模式")]),t._v("和"),e("strong",[t._v("类创建型模式")]),t._v("。对象创建型模式处理对象的创建，类创建型模式处理类的创建。")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("对象创建型模式")]),t._v("把对象创建的一部分推迟到另一个对象中。（代表模式："),e("strong",[t._v("单例模式")]),t._v("、"),e("strong",[t._v("建造者模式")]),t._v("、"),e("strong",[t._v("原型模式")]),t._v("、"),e("strong",[t._v("抽象工厂模式")]),t._v("）")]),t._v(" "),e("li",[e("strong",[t._v("类创建型模式")]),t._v("将它对象的创建推迟到子类中。（代表模式："),e("strong",[t._v("工厂方法模式")]),t._v("）")])]),t._v(" "),e("h3",{attrs:{id:"创建型模式应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式应用"}},[t._v("#")]),t._v(" 创建型模式应用")]),t._v(" "),e("p",[t._v("现代软件工程更加依赖对象的组合，而不是类的继承，强调从硬编码的行为转变到定义一组基本行为来组合成复杂的行为。")]),t._v(" "),e("p",[t._v("硬编码的行为不够灵活，因为如果想要改变设计的一部分，需要通过重写或者重新实现才能完成。")]),t._v(" "),e("p",[t._v("另外，硬编码没有提高重用性，而且难以跟踪错误。由于这些原因，创建型模式比硬编码的行为更有用。")]),t._v(" "),e("p",[t._v("创建型模式使设计变得更灵活，提供了不同的方式，从代码中移除了对需要实例化的具体类的引用。换句话说，这些模式增强了对象和类之间的独立性。")]),t._v(" "),e("p",[t._v("在以下情况中，可以考虑应用创建型模式：")]),t._v(" "),e("ul",[e("li",[t._v("一个系统需要和它的对象和产品的创建相互独立。")]),t._v(" "),e("li",[t._v("一组相关的对象被设计为一起使用。")]),t._v(" "),e("li",[t._v("隐藏一个类库的具体实现，仅暴露它们的接口。")]),t._v(" "),e("li",[t._v("创建独立复杂对象的不同表示。")]),t._v(" "),e("li",[t._v("一个类希望它的子类实现它所创建的对象。")]),t._v(" "),e("li",[t._v("类的实例化在运行时才指定。")]),t._v(" "),e("li",[t._v("一个类只能有一个实例，而且这个实例能在任何时候访问到。")]),t._v(" "),e("li",[t._v("实例应该能在不修改的情况下具有可扩展性。")])]),t._v(" "),e("h3",{attrs:{id:"创建型模式代表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式代表"}},[t._v("#")]),t._v(" 创建型模式代表")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/pattern/单例模式.html"}},[t._v("单例模式 (Singleton Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/简单工厂模式.html"}},[t._v("简单工厂模式 (Simple Factory Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/工厂方法模式.html"}},[t._v("工厂方法模式 (Factory Method Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/抽象工厂模式.html"}},[t._v("抽象工厂模式 (Abstract Factory Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/构造者模式.html"}},[t._v("构造者模式 (Builder Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/原型模式.html"}},[t._v("原型模式 (Prototype Pattern)")])],1)]),t._v(" "),e("h3",{attrs:{id:"结构型模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[t._v("#")]),t._v(" 结构型模式")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/pattern/适配器模式.html"}},[t._v("适配器模式 (Adapter Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/桥接模式.html"}},[t._v("桥接模式 (Bridge Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/装饰者模式.html"}},[t._v("装饰者模式 (Decorator Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/组合模式.html"}},[t._v("组合模式 (Composite Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/外观模式.html"}},[t._v("外观模式 (Facade Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/享元模式.html"}},[t._v("享元模式 (Flyweight Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/代理模式.html"}},[t._v("代理模式 (Proxy Pattern)")])],1)]),t._v(" "),e("h3",{attrs:{id:"行为型模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式"}},[t._v("#")]),t._v(" 行为型模式")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/pattern/模板方法模式.html"}},[t._v("模板方法模式 (Template Method Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/命令模式.html"}},[t._v("命令模式 (Command Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/迭代器模式.html"}},[t._v("迭代器模式 (Iterator Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/观察者模式.html"}},[t._v("观察者模式 (Observer Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/解释器模式.html"}},[t._v("解释器模式 (Interpreter Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/中介者模式.html"}},[t._v("中介者模式 (Mediator Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/职责链模式.html"}},[t._v("职责链模式 (Chain of Responsibility Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/备忘录模式.html"}},[t._v("备忘录模式 (Memento Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/策略模式.html"}},[t._v("策略模式 (Strategy Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/访问者模式.html"}},[t._v("访问者模式 (Visitor Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/状态模式.html"}},[t._v("状态模式 (State Pattern)")])],1)]),t._v(" "),e("h2",{attrs:{id:"📚-资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#📚-资料"}},[t._v("#")]),t._v(" 📚 资料")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://item.jd.com/10100236.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《O'Reilly：Head First 设计模式》"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://item.jd.com/10079261.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《大话设计模式》"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"🚪-传送"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#🚪-传送"}},[t._v("#")]),t._v(" 🚪 传送")]),t._v(" "),e("p",[t._v("◾ 🏠 "),e("a",{attrs:{href:"https://github.com/dunwu/design",target:"_blank",rel:"noopener noreferrer"}},[t._v("DESIGN 首页"),e("OutboundLink")],1),t._v(" ◾ 🎯 "),e("a",{attrs:{href:"https://github.com/dunwu/blog",target:"_blank",rel:"noopener noreferrer"}},[t._v("我的博客"),e("OutboundLink")],1),t._v(" ◾")])])}),[],!1,null,null,null);r.default=_.exports}}]);