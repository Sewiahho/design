(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{461:function(t,r,e){"use strict";e.r(r);var a=e(14),n=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"design"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#design"}},[t._v("#")]),t._v(" Design")]),t._v(" "),e("blockquote",[e("p",[t._v("☕ "),e("strong",[t._v("DESIGN")]),t._v(" 是架构、设计相关的教程。")]),t._v(" "),e("ul",[e("li",[t._v("🔁 项目同步维护："),e("a",{attrs:{href:"https://github.com/dunwu/design/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github"),e("OutboundLink")],1),t._v(" | "),e("a",{attrs:{href:"https://gitee.com/turnon/design/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitee"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("📖 电子书阅读："),e("a",{attrs:{href:"https://dunwu.github.io/design/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github Pages"),e("OutboundLink")],1),t._v(" | "),e("a",{attrs:{href:"http://turnon.gitee.io/design/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitee Pages"),e("OutboundLink")],1)])])]),t._v(" "),e("h2",{attrs:{id:"📖-内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#📖-内容"}},[t._v("#")]),t._v(" 📖 内容")]),t._v(" "),e("h3",{attrs:{id:"系统架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#系统架构"}},[t._v("#")]),t._v(" 系统架构")]),t._v(" "),e("blockquote",[e("p",[t._v("如果把软件开发工作比作是一场战争，那么系统架构无疑是战略层面的工作。众所周知，万丈高楼平地起，系统架构就像是软件的地基，如果一开始就歪了，那么代码写得再漂亮，软件也难以成功。")]),t._v(" "),e("p",[t._v("软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。重点是分而治之，先将大型系统抽象为各个组件或模块；然后逐一解决各组件、各模块的功能、性能问题；最后将这些组件、模块整合成对外服务的一个整体。")])]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/architecture/系统架构面试.html"}},[t._v("系统架构面试题")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/architecture/系统架构概述.html"}},[t._v("系统架构概述")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/architecture/系统高性能架构.html"}},[t._v("系统高性能架构")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/architecture/系统高可用架构.html"}},[t._v("系统高可用架构")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/architecture/系统伸缩性架构.html"}},[t._v("系统伸缩性架构")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/architecture/系统扩展性架构.html"}},[t._v("系统扩展性架构")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/architecture/系统安全性架构.html"}},[t._v("系统安全性架构")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/architecture/大型系统核心技术.html"}},[t._v("大型系统核心技术")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/architecture/领域驱动设计.html"}},[t._v("领域驱动设计")])],1)]),t._v(" "),e("h3",{attrs:{id:"设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"pattern"}},[t._v("设计模式")])]),t._v(" "),e("blockquote",[e("p",[t._v("设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。")])]),t._v(" "),e("h4",{attrs:{id:"创建型模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[t._v("#")]),t._v(" 创建型模式")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/pattern/单例模式.html"}},[t._v("单例模式 (Singleton Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/简单工厂模式.html"}},[t._v("简单工厂模式 (Simple Factory Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/工厂方法模式.html"}},[t._v("工厂方法模式 (Factory Method Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/抽象工厂模式.html"}},[t._v("抽象工厂模式 (Abstract Factory Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/构造者模式.html"}},[t._v("构造者模式 (Builder Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/原型模式.html"}},[t._v("原型模式 (Prototype Pattern)")])],1)]),t._v(" "),e("h4",{attrs:{id:"结构型模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[t._v("#")]),t._v(" 结构型模式")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/pattern/适配器模式.html"}},[t._v("适配器模式 (Adapter Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/桥接模式.html"}},[t._v("桥接模式 (Bridge Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/装饰者模式.html"}},[t._v("装饰者模式 (Decorator Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/组合模式.html"}},[t._v("组合模式 (Composite Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/外观模式.html"}},[t._v("外观模式 (Facade Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/享元模式.html"}},[t._v("享元模式 (Flyweight Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/代理模式.html"}},[t._v("代理模式 (Proxy Pattern)")])],1)]),t._v(" "),e("h4",{attrs:{id:"行为型模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式"}},[t._v("#")]),t._v(" 行为型模式")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/pattern/模板方法模式.html"}},[t._v("模板方法模式 (Template Method Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/命令模式.html"}},[t._v("命令模式 (Command Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/迭代器模式.html"}},[t._v("迭代器模式 (Iterator Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/观察者模式.html"}},[t._v("观察者模式 (Observer Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/解释器模式.html"}},[t._v("解释器模式 (Interpreter Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/中介者模式.html"}},[t._v("中介者模式 (Mediator Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/职责链模式.html"}},[t._v("职责链模式 (Chain of Responsibility Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/备忘录模式.html"}},[t._v("备忘录模式 (Memento Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/策略模式.html"}},[t._v("策略模式 (Strategy Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/访问者模式.html"}},[t._v("访问者模式 (Visitor Pattern)")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pattern/状态模式.html"}},[t._v("状态模式 (State Pattern)")])],1)]),t._v(" "),e("h3",{attrs:{id:"重构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重构"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"refactor"}},[t._v("重构")])]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("改善既有代码的设计")]),t._v("。")]),t._v(" "),e("p",[t._v("关键词：过长函数、过大的类、基本类型偏执、过长参数列、数据泥团、switch 声明、临时字段、被拒绝的馈赠、异曲同工的类、发散式变化、霰弹式修改、平行继承体系、过多的注释、重复代码、冗余类、纯稚的数据类、夸夸其谈未来性、依恋情结、狎昵关系、过度耦合的消息链、中间人、不完美的库类")])]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/refactor/代码的坏味道和重构.html"}},[t._v("代码的坏味道和重构")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/refactor/代码坏味道之代码臃肿.html"}},[t._v("代码坏味道之代码臃肿")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/refactor/代码坏味道之滥用面向对象.html"}},[t._v("代码坏味道之滥用面向对象")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/refactor/代码坏味道之变革的障碍.html"}},[t._v("代码坏味道之变革的障碍")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/refactor/代码坏味道之非必要的.html"}},[t._v("代码坏味道之非必要的")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/refactor/代码坏味道之耦合.html"}},[t._v("代码坏味道之耦合")])],1)]),t._v(" "),e("h3",{attrs:{id:"uml"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uml"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"uml"}},[t._v("UML")])]),t._v(" "),e("blockquote",[e("p",[t._v("统一建模语言（英语 - Unified Modeling Language，缩写 UML）是非专利的第三代建模和规约语言。UML 是一种开放的方法，用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品的开放方法。UML 展现了一系列最佳工程实践，这些最佳实践在对大规模，复杂系统进行建模方面，特别是在软件架构层次已经被验证有效。")])]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/uml/uml-quickstart.html"}},[t._v("UML 快速入门")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/uml/UML结构建模图.html"}},[t._v("UML 结构建模图")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/uml/UML行为建模图.html"}},[t._v("UML 行为建模图")])],1)])])}),[],!1,null,null,null);r.default=n.exports}}]);